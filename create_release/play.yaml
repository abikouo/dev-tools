- name: Create release branch
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Ensure release_version is defined
      fail:
        msg: "Release version should be defined using 'release_version'"
      when: release_version is undefined

    - name: Ensure release_repository is defined
      fail:
        msg: "Release repository should be defined using 'release_repository'"
      when: release_repository is undefined

    - name: Compute release parameters
      compute_release_params:
        version: "{{ release_version }}"
        repository: "{{ release_repository }}"
      register: release_params

    - name: create temporary for repository
      tempfile:
        suffix: .release
        state: directory
      register: tmpd

    - vars:
        clone_path: "{{ tmpd.path }}/repository"
        virtualenv_path: "{{ tmpd.path }}/virtualenv"
      block:
        - name: git clone fork
          shell:
            cmd: "git clone {{ release_params.github_fork }} {{ clone_path }}"

        - name: git add upstream repository
          shell:
            cmd: |
              git remote add master {{ release_params.github_upstream }}
              git fetch master
            chdir: "{{ clone_path }}"

        - name: check if stable branch exists
          shell:
            cmd: 'git checkout master/{{ release_params.stable_branch }}'
            chdir: "{{ clone_path }}"
          register: checkout_stable
          ignore_errors: true

        - name: create upstream branch
          shell:
            cmd: |
              git checkout -B {{ release_params.stable_branch }} master/main
              git push -u master {{ release_params.stable_branch }}
            chdir: "{{ clone_path }}"
          when: checkout_stable is failed

        - name: create release branch
          shell:
            cmd: 'git checkout -B {{ release_params.release_branch }} master/{{ release_params.stable_branch }}'
            chdir: "{{ clone_path }}"

        - name: Create virtual env for testing
          pip:
            name:
              - tox
              - yq
              - ansible-core
              - antsibull-changelog
              - pygithub
            virtualenv: "{{ virtualenv_path }}"
            virtualenv_command: "{{ release_virtualenv_command | default(omit) }}"
            virtualenv_python: "{{ release_virtualenv_python | default(omit) }}"

        - name: Run tox prepare_release environment
          shell:
            cmd: >
              . {{ tmpd.path }}/virtualenv/bin/activate && 
              tox -e prepare_release -vv
            chdir: "{{ clone_path }}"
          ignore_errors: true
          register: tox_prepare_release

        - name: Run antsibull-changelog
          shell:
            cmd: >
              . {{ tmpd.path }}/virtualenv/bin/activate && 
              antsibull-changelog release --verbose --version '{{ release_version }}'
            chdir: "{{ clone_path }}"

        - name: Update galaxy.yml version
          shell:
            cmd: >
              . {{ tmpd.path }}/virtualenv/bin/activate &&
              yq -yi '.version = "{{ release_version }}"' galaxy.yml
            chdir: "{{ clone_path }}"

        - name: commit changes to release branch and push branch to user fork
          shell:
            cmd: |
              git add -A
              git commit -m "Prepare Release {{ release_version }}"
              git push -f -u origin {{ release_params.release_branch }}
            chdir: "{{ clone_path }}"

        - name: create pull request on upstream branch
          create_pr:
            repository: "{{ release_params.github_upstream_name }}"
            base: "{{ release_params.stable_branch }}"
            head: "{{ release_params.github_user }}:{{ release_params.release_branch }}"
            body: |
              ##### SUMMARY
              - Run `antsibull-changelog` to generate release notes.
              - Update `galaxy.yml` version to `{{ release_version }}`

              ##### ISSUE TYPE
              - Release Pull Request
            title: "Prepare release {{ release_version }}"
            token: "{{ release_params.github_token }}"
          register: pr

        - name: Display output
          debug:
            msg: "The following PR has been created: {{ pr.url }}"

      always:
        - name: Delete temporary directory
          file:
            state: absent
            path: "{{ tmpd.path }}"